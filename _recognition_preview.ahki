; (C) Copyright 2021, Bartlomiej Uliasz
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; http://www.apache.org/licenses/LICENSE-2.0
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.

; Allows preview recognition after training is done

PreviewRecognition(btnCtrl, *) {
	col1Width := 200
	col2Width := 600
	tessdataDirForOcr := DATA_DIR
	modelNameForOcr := MODEL_NAME
	ignoreSpaces := false

	if (!CheckGeneratedModelExistence()) {
		message := "There is no newly generated model of name '" MODEL_NAME "' inside the '" DATA_DIR "' folder.`n"
		if (START_MODEL) {
			if (YesNoConfirmation(message "Do you want to use Start Model instead for this preview?")) {
				tessdataDirForOcr := TESSDATA
				modelNameForOcr := START_MODEL
			} else {
				return
			}
		} else {
			NotAllowedBox(message "Please execute training first or select a Start Model.")
			return
		}
	}

	imageGui := Gui("+Resize -DPIScale +Owner" btnCtrl.Gui.Hwnd, "Trained Image")
	imageList := []
	for fileExtension in SUPPORTED_IMAGE_FILES {
		ArrayPushAll(FindAllFilesExtended(GROUND_TRUTH_DIR "\*" fileExtension), imageList)
	}
	
	imageList := ArraySort(imageList, (a,b)=>a.modified-b.modified) 	; Sort by modificaton date descending

	imageGui.Add("Text", "section xm w" col1Width, "Processed image:")
	pathCtrl := imageGui.Add("Text", "ys w" col2Width " vImagePath", " ")

	imageGui.Add("Text", "section xm w" col1Width, "Recongized value:")
	ocrResultCtrl := imageGui.Add("Text", "ys h60 w" col2Width " vOcrResult", " ")
	ocrResultCtrl.SetFont("cBlue s15 w666")

	imageGui.Add("Text", "section xm h35 w" col1Width, "Value from .gt.txt file:")
	gtTxtCtrl := imageGui.Add("Text", "ys h60 w" col2Width " vGtTxtValue", " ")
	gtTxtCtrl.SetFont("cBlue s15 w666")

	skipBtn := imageGui.Add("Button", "xm section default", "&Next")
	skipBtn.OnEvent("Click", ShowNextImage)

	skipBtn := imageGui.Add("Button", "ys", "Find next &Wrong OCR")
	skipBtn.OnEvent("Click", ShowNextWrong)

	exitBtn := imageGui.Add("Button", "ys", "&Close")
	exitBtn.OnEvent("Click", CloseCb)
	picCtrl := imageGui.Add("Pic", "xm")
	
	ignoreSpacesCtrl := imageGui.Add("Checkbox", "ys hp 0x20 Checked" ignoreSpaces, "Ignore space characters")
	ignoreSpacesCtrl.OnEvent("Click", (ctrlObj,*)=>ignoreSpaces:=ctrlObj.Value)

	imageGui.Title := "Image tests"
	imageGui.Show("xCenter AutoSize")  ; Resize the window to match the picture size.
	imageGui.OnEvent("Close", CloseCb)
	imageGui.OnEvent("Escape", CloseCb)
	btnCtrl.Gui.Opt("+Disabled")

	ShowNextImage()
	WinWaitClose(imageGui)

	return

	ShowNextWrong(*) {
		loop {
			ShowNextImage()
		} until imageList.Length == 0 || !CompareResults(ocrResultCtrl.Text, gtTxtCtrl.Text)
		if (imageList.Length == 0) {
			AotBox("No more wrong OCRs")
		}
	}
	
	CompareResults(ocrResult, gtTxtValue) {
		if (ignoreSpaces) {
			ocrResult := StrReplace(ocrResult, " ")
			gtTxtValue := StrReplace(gtTxtValue, " ")
		}
		return ocrResult == gtTxtValue
	}

	ShowNextImage(*) {
		if (imageList.Length == 0) {
			AotBox("No more files")
			WinClose(imageGui)
			return
		}
		imageGui.Opt("+Disabled")
		imageFullPath := imageList.Pop().path
		pathCtrl.Text := imageFullPath
		ocrResultCtrl.SetFont("cGray")
		ocrResultCtrl.Text := "..."
		gtTxtPath := RemoveImageExtension(imageFullPath) ".gt.txt"
		if (FileExist(gtTxtPath)) {
			gtTxtCtrl.Text := FileGetFirstLine(gtTxtPath)
		} else {
			gtTxtCtrl.Text := "<none>"
		}
		picCtrl.Value := "*w" (col1Width + col2Width) " *h-1 " imageFullPath  ; Load the image.

		imageGui.Show("xCenter AutoSize")  ; Resize the window to match the picture size.

		recognizedValue := OcrImageFile(imageFullPath, modelNameForOcr, tessdataDirForOcr)
		ocrResultCtrl.Text := recognizedValue
		ocrResultCtrl.SetFont(CompareResults(recognizedValue, gtTxtCtrl.Text) ? "cGreen" : "cRed")
		imageGui.Opt("-Disabled")
	}

	CloseCb(*) {
		btnCtrl.Gui.Opt("-Disabled")
		imageGui.Destroy()
	}

	CheckGeneratedModelExistence() {
		generatedModelFile := DATA_DIR "\" MODEL_NAME ".traineddata"
		return FileExist(generatedModelFile)
	}
}
