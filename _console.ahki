; (C) Copyright 2021, Bartlomiej Uliasz
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; http://www.apache.org/licenses/LICENSE-2.0
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.

; Executes commands in system Shell, and eventually returns stream output
; Execute with empty/no command to close the created background console.
; Modes:
; 1 - Invisible direct execution
; 2 - Invisible execution within new 'cmd' process (use this one if you 
;     redirect input/output stream in your command using '>', '|' or '<' 
;     operators). StdOut/StdErr in function returned object will be empty after 
;     normal execution but errors will throw an exception. If you need output 
;     please redirect StdOut with '>' in command so that you can verify it.
; 3 - Visible 'cmd' execution. It is the slowest one, but the only that allows 
;     user to view console's live output and eventually input manually if
;     needed.
ExecuteCommand(command:="", mode:=1) {
	global DEBUG_MODE
	static hCon:="", cPid:=""
	
	if (command == "") {
		FreeConsole()
		return
	}
	
	if (mode > 1) {
		command := "cmd /U /V:ON /C `"" command "`""
	}
	
	if (mode == 3) {
		if (DEBUG_MODE) {
			command .= " & pause"
		}
		FreeConsole()
		RunWait(command)
		return
	}
	
	AttachConsole()
	
	objShell := ComObject("WScript.Shell")
	objExec := objShell.Exec(command)
	
	stdOut := stdErr := ""

	objExec.StdIn.Close()
	
	while (!objExec.StdErr.AtEndOfStream) {
		stdErr := objExec.StdErr.ReadAll()
	}
	while (!objExec.StdOut.AtEndOfStream) {
		stdOut .= objExec.StdOut.ReadAll()
	}

	; MsgBox A_ThisFunc ":" A_LineNumber ": PID=" objExec.ProcessID " Status=" objExec.Status " ExitCode=" objExec.ExitCode " LE=" A_LastError
	
	if (objExec.ExitCode) {
		errMsg := "Received " objExec.ExitCode " exit code for command: " command
		extraMsg := ""
		if (StdErr) {
			errMsg .= "`n`n" StdErr
			extraMsg := StdOut
		} else if (StdOut) {
			errMsg .= "`n`n" StdOut
		}
		throw Error(errMsg, -1, extraMsg)
	}
	
	if (DEBUG_MODE) {
		MsgBox(
			"Command executed: " command "`n`n"
				. "StdErr:`n" Trim(StdErr, "`t`n`r ") "`n`n"
				. "StdOut:`n" Trim(StdOut, "`t`n`r ")
		)
	}
	return {StdOut: stdOut, StdErr: stdErr}


	AttachConsole() {
		if (cPid) {
			return	; a console is already attached
		}

		DetectHiddenWindows True
		Run(A_ComSpec " /k",, "Hide", &cPid)
		WinWait("ahk_pid " cPid,, 10)
		DllCall("AttachConsole", "UInt", cPid)
		hCon := DllCall("CreateFile", 
			"Str", "CONOUT$",
			"UInt", 0xC0000000,
			"UInt", 7,
			"UInt", 0,
			"UInt", 3,
			"UInt", 0,
			"UInt", 0
		)
	}

	FreeConsole() {
		if (!hCon) {
			return
		}
		DllCall("CloseHandle", "uint", hCon)
		DllCall("FreeConsole")
		ProcessClose(cPid)
		hCon := cPid := ""
	}
}
